osc(3, 0.1, [0.1, 0.3, 0.5])
  // .modulate(noise(1, 2), 1)
  // .modulateRotate(o0, 0.5)
  // .mult(shape(1).scale(10), () => a.fft[0] * 1)
  .luma(0.3)
  .modulateRotate(osc(3, 0.1, 5), 1)
  .modulate(o1, 1)
  .pixelate(100, 10)
  .sub(
    shape(5,)
      .scale(() => Math.sin(time) * 0.5 + 1.5)
      .rotate(() => time/2)
  )
  .modulateScale(o0, () => a.fft[0] * 5)
  .pixelate(500, 200)
  .modulate(o0)
  .rotate(() => time / 2)
  .modulateScale(o0, 1)
  // .thresh(0.7)
  .luma(0.2)
  .modulate(o0)
  .rotate(() => time / 2)
  .modulateRepeatX(o0, 1)
  .colorama([1, 20, 16])
  // .modulateKaleid(o1)
  // .scale(() => Math.sin(time / 10) * 1)
  .luma(0.4)
  // .brightness(0.1)
  // .thresh(0.1)
  // .pixelate(100, 1000)
  .out(o0)

osc(5, 0.1, 0.5)
  .modulate(noise(10), 0.1)
  .modulate(o0, 1)modulateScale(o1, () => time / 5)
  .diff(voronoi(3))
  .out(o0)


voronoi(5, 2, () => a.fft[0] * 1)
  .modulateRotate(o0, 1)
  .rotate(() => time / 4)
  .scale(() => Math.sin(time) * 1 - 1.5)
  .modulate(o0)
  .out(oà¹…)


osc(10, [1, 2], [0.2, 0.6, 1, 2])
.modulateRotate(o1)
.modulate(o1)
.rotate(() => time / 2)
.modulateScale(o1, 1)
// .thresh(0.5)
// .colorama(10)
.color(0.9,0.3,0.7)
.diff(o0)
.modulateRotate(o0, 1)
.modulateScale(o1, 1)
.rotate(() => time / 4)
.add(shape(100).scale(() => Math.sin(time / 20 ) * 1).color(1, 0.5, 0.2))
.modulate(o2)
// .scale(() => Math.sin(time / 20))
// .modulateHue(noise(2), 1)
// .modulateScale(noise([2, 5, 10, 20]), [0, 0.5].smooth())
// .modulateKaleid(o1, 0.1)
// .pixelate(2, 10)
.out(o0)

noise(2, 2, 10)
.modulateScale(o1, 1)
.rotate(() => time/4)
.color(0.5, [0.2, 0.4, 0.7], [0.5, 0.1])
.modulateRotate(osc(10, 2, 3))
.modulateScale(o1, 1)
.out(o1)

osc([2, 3, 6], 0.3, [1, 0.7, 1.2])
.modulateScale(noise(1), 1)
.pixelate(10, 2)
.modulateRotate(o0,() => a.fft[0] * 3)
.modulate(o0)
// .color(0.1, 0.5, 0.5)
// .modulateScale(o1, 0.5)
// .mult(o0)
.luma(0.6)
.modulate(o0)
.modulateKaleid(o0, 0.4)
.pixelate([100, 50, 5], [10, 100, 500])
.scale(() => a.fft[0] * 0.85)
.colorama([0.3, 1, 0.5])
.brightness([-.55, -.4, -.5])
// .brihthness(() => -a.fft[0])
// .rotate(() => a.fft[0] * 360)
.modulate(o1)
.out(o0)
